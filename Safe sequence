#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <stdbool.h>
#include <time.h>

int nR, nP;
int r[15];
int a[15][15];
int max[15][15];
int need[15][15];
int safe[15];
int n = 0;

pthread_mutex_t lock;
pthread_cond_t c;

bool getSafeSeq() 
{
        int temp[nR];
        for(int i=0; i<nR; i++) 
		temp[i] = r[i];

        bool f[nP];
        for(int i=0; i<nP; i++)
		f[i] = false;
        int nf=0;
        while(nf < nP)
	{
                bool s = false;

                for(int i=0; i<nP; i++)
		{
                        if(!f[i])
			{
                                bool p = true;
                                for(int j=0; j<nR; j++)
                                        if(need[i][j] > temp[j])
					{
                                                p = false;
                                                break;
                                        }

                                if(p) 
				{
                                        for(int j=0; j<nR; j++)
                                                temp[j] += a[i][j];
                                        safe[nf] = i;
                                        f[i] = true;
                                        ++nf;
                                        s= true;
                                }
                        }
                }

                if(!s) 
		{
                        for(int k=0; k<nP; k++) 
				safe[k] = -1;
                        return false;
                }
        }
        return true;
}
void* processCode(void *arg) 
{
        int p = *((int *) arg);

        pthread_mutex_lock(&lock);

        while(p != safe[n])
                pthread_cond_wait(&c, &lock);

	for(int i=0; i<nR; i++)
                r[i] += a[p][i];

        n++;
        pthread_cond_broadcast(&c);
        pthread_mutex_unlock(&lock);
	pthread_exit(NULL);
}
int main(int argc, char** argv) 
{
        printf("\n Enter the no.of processes:  ");
        scanf("%d", &nP);

        printf("\nEnter the no.of resources: ");
        scanf("%d", &nR);

        printf("\nCurrently Available resources (R1 R2 ...) ");
        for(int i=0; i<nR; i++)
                scanf("%d", &r[i]);

        printf("\n");
        for(int i=0; i<nP; i++)
	{
                printf("\n No.of Resource allocated to the process %d (R1 R2 ...): ", i+1);
                for(int j=0; j<nR; j++)
                        scanf("%d", &a[i][j]);
        }
        printf("\n");

        for(int i=0; i<nP; i++)
	{
                printf("\nMax no.of resources required %d (R1 R2 ...): ", i+1);
                for(int j=0; j<nR; j++)
                        scanf("%d", &max[i][j]);
        }
        printf("\n");
   for(int i=0; i<nP; i++) 
		safe[i] = -1;
        if(!getSafeSeq())
	{
                printf("\nUnsafe State! The processes leads the system to a unsafe state.\n\n");
                exit(-1);
        }
        printf("\n\nSafe Sequence: ");
	for(int i=0; i<nP; i++)
	{
                printf("%-3d", safe[i]+1);
        }
	printf("\n");
	printf("\n Allocated: \n");
        for(int i=0; i<nP; i++){
		for(int j=0;j<nR;j++)
                	printf("%3d ", a[i][j]);
		printf("\n");
	}
	
	for(int i=0; i<nP; i++)
                for(int j=0; j<nR; j++)
                        need[i][j] = max[i][j] - a[i][j];	

	printf("\nNeed: \n");
        for(int i=0; i<nP; i++){
		for(int j=0;j<nR;j++)
                	printf("%3d ", need[i][j]);
		printf("\n");
	}

        //=========================================================================================================
        printf("\nExecuting Processes...\n");
        sleep(1);

	pthread_t processes[nP];
        pthread_attr_t attr;
        pthread_attr_init(&attr);

	int processNumber[nP];
	for(int i=0; i<nP; i++)
		processNumber[i] = i;

        for(int i=0; i<nP; i++)
                pthread_create(&processes[i], &attr, processCode, (void *)(&processNumber[i]));

        for(int i=0; i<nP; i++)
                pthread_join(processes[i], NULL);

	printf("\n Available : ");
        for(int i=0; i<nR; i++)
                printf("%3d", r[i]);
  printf("\nAll processes are successfully finished\n");
}





